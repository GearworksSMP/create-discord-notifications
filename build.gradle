import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'com.gradleup.shadow' version '8.3.1'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
	maven { url = "https://maven.blamejared.com/" } // JEI
	maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
	maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
	maven { url = "https://api.modrinth.com/maven" } // LazyDFU
	maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
	maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib, Registrate
	maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // Forge Config API Port
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
	maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
	maven { url = "https://maven.tterrag.com/" } // Flywheel
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"create-discord-notifications" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

configurations {
	shadow
	implementation.extendsFrom(shadow)
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
	}

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "com.simibubi.create:create-fabric-${project.minecraft_version}:${project.create_version}"

	modImplementation "maven.modrinth:numismatics:${project.numismatics_version}"
	modImplementation("com.github.Jamalam360:create-rent-a-plate:${project.rent_a_plate_version}") {
		transitive = false
	}

	shadow("net.dv8tion:JDA:${project.jda_version}") {
	 	exclude module: 'opus-java'
		exclude module: 'gson'
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}


tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.named("shadowJar", ShadowJar) {
	from sourceSets.main.output
	from sourceSets.client.output
	minimize()
	exclude "META-INF"
	archiveClassifier = "dev-shadow"
	configurations = [project.configurations.shadow]
	enableRelocation = true
	relocationPrefix = "com.gearworks.shadow"
}

tasks.remapJar {
	dependsOn("shadowJar")
	inputFile = tasks.shadowJar.archiveFile
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}
